rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 사용자 프로필 규칙
    match /users/{userId} {
      // 사용자는 자신의 프로필만 읽고 쓸 수 있음
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 산책 세션 서브컬렉션 규칙
      match /walk_sessions/{sessionId} {
        // 사용자는 자신의 산책 세션만 읽고 쓸 수 있음
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // 세션 생성 시 추가 검증
        allow create: if request.auth != null 
                     && request.auth.uid == userId
                     && validateWalkSession();
        
        // 세션 업데이트 시 추가 검증
        allow update: if request.auth != null 
                     && request.auth.uid == userId
                     && validateWalkSessionUpdate();
      }
    }
    
    // 기존 walk_sessions 컬렉션 (마이그레이션 기간 동안만 유지)
    // TODO: 마이그레이션 완료 후 이 규칙들을 제거하세요
    match /walk_sessions/{sessionId} {
      allow read: if request.auth != null 
                 && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null 
                  && request.auth.uid == request.resource.data.userId;
    }
    
    // 기타 모든 문서는 기본적으로 접근 거부
    match /{document=**} {
      allow read, write: if false;
    }
  }
  
  // 산책 세션 데이터 검증 함수
  function validateWalkSession() {
    let data = request.resource.data;
    return data.keys().hasAll([
      'startTime', 'selectedMate', 'startLocation', 
      'destinationLocation', 'waypointLocation'
    ]) &&
    // 시간 검증
    data.startTime is timestamp &&
    (data.endTime == null || data.endTime is timestamp) &&
    // 동반자 검증
    data.selectedMate is string &&
    data.selectedMate in ['혼자', '연인', '친구'] &&
    // 위치 검증
    isValidLocation(data.startLocation) &&
    isValidLocation(data.destinationLocation) &&
    isValidLocation(data.waypointLocation) &&
    // 선택적 필드 검증
    (data.totalDuration == null || data.totalDuration is int) &&
    (data.totalDistance == null || data.totalDistance is number) &&
    (data.walkReflection == null || data.walkReflection is string) &&
    (data.waypointQuestion == null || data.waypointQuestion is string) &&
    (data.waypointAnswer == null || data.waypointAnswer is string) &&
    (data.poseImageUrl == null || data.poseImageUrl is string) &&
    (data.takenPhotoPath == null || data.takenPhotoPath is string) &&
    (data.locationName == null || data.locationName is string);
  }
  
  // 산책 세션 업데이트 검증 함수
  function validateWalkSessionUpdate() {
    let data = request.resource.data;
    // 업데이트 시에는 기본 필드들은 변경되지 않아야 함
    return data.startTime == resource.data.startTime &&
           data.selectedMate == resource.data.selectedMate &&
           data.startLocation == resource.data.startLocation &&
           data.destinationLocation == resource.data.destinationLocation &&
           data.waypointLocation == resource.data.waypointLocation;
  }
  
  // 위치 데이터 검증 함수
  function isValidLocation(location) {
    return location is map &&
           location.keys().hasAll(['latitude', 'longitude']) &&
           location.latitude is number &&
           location.longitude is number &&
           location.latitude >= -90 && location.latitude <= 90 &&
           location.longitude >= -180 && location.longitude <= 180;
  }
}