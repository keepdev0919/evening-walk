import 'package:flutter/material.dart';
import '../services/kakao_auth_service.dart';
import '../services/google_auth_service.dart';
import 'user_info_screen.dart' as userinfo;
import 'package:walk/src/common/widgets/black_cat_widget.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:walk/src/home/home_screen.dart';

class LoginPage extends StatelessWidget {
  const LoginPage({super.key});

  Future<void> handleLogin(
    BuildContext context,
    Future<bool> Function() loginMethod, //ÏñòÎäî signInWithGoogle,KakaoÎ•º ÎßêÌï®
  ) async {
    showDialog(
      //ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäº ÎàÑÎ•¥Î©¥ Î°úÍ∑∏Ïù∏ ÏßÑÌñâÎêòÎäî ÎèôÏïà Î°úÎî© ÏïÑÏù¥ÏΩòÏù¥ Îú∏
      context: context, //Îí§Ïùò contextÎäî Î°úÍ∑∏Ïù∏ÌéòÏù¥ÏßÄ context
      barrierDismissible: false,
      builder: (context) => const Center(child: CircularProgressIndicator()),
      //(context)Ïùò contextÎäî Îã§Ïù¥ÏñºÎ°úÍ∑∏Ïùò contextÏûÑ
    );

    final success = await loginMethod();

    if (!context.mounted)
      return; // ÎπÑÎèôÍ∏∞ ÏûëÏóÖ(await) ÌõÑÏóê ÏúÑÏ†ØÏù¥ ÌôîÎ©¥ÏóêÏÑú ÏÇ¨ÎùºÏ°åÏùÑ ÏàòÎèÑ ÏûàÎäî ÏÉÅÌô©Ïóê ÎåÄÎπÑÌïú ÏïàÏ†ÑÏû•ÏπòÏûÖÎãàÎã§. Ïù¥ ÏΩîÎìúÍ∞Ä ÏóÜÏúºÎ©¥ Ïï±Ïù¥ ÎπÑÏ†ïÏÉÅ Ï¢ÖÎ£åÎê† Ïàò ÏûàÏäµÎãàÎã§.

    Navigator.pop(context); //Î°úÎî©Ï∞ΩÏùÑ Îã´Îäî ÏΩîÎìú

    if (success) {
      // ÌîÑÎ°úÌïÑ Ï°¥Ïû¨ Ïó¨Î∂ÄÎ•º ÌôïÏù∏ÌïòÏó¨ Î∂ÑÍ∏∞
      try {
        final user = FirebaseAuth.instance.currentUser;
        if (user == null) {
          throw Exception('Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        }

        final doc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();

        final data = doc.data();
        final String nickname = (data?['nickname'] ?? '').toString().trim();
        final bool hasProfile = nickname.isNotEmpty;

        if (hasProfile) {
          // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê: ÌôàÏúºÎ°ú ÏßÅÌñâ (Î∞±Ïä§ÌÉù Ï†úÍ±∞)
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(builder: (_) => const HomeScreen()),
            (route) => false,
          );
        } else {
          // Ïã†Í∑ú ÏÇ¨Ïö©Ïûê: ÌîÑÎ°úÌïÑ(Ïò®Î≥¥Îî© Î™®Îìú)Î°ú Ïù¥Îèô
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (_) => const userinfo.UserInfo()),
          );
        }
      } catch (e) {
        // ÌôïÏù∏ Ïã§Ìå® Ïãú ÏïàÏ†ÑÌïòÍ≤å Ïò®Î≥¥Îî© Í≤ΩÎ°úÎ°ú Î≥¥ÎÉÑ
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => const userinfo.UserInfo()),
        );
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Text('Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'),
          backgroundColor: Colors.black.withValues(alpha: 0.6),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: const Text(
          'Ï†ÄÎÖÅÏÇ∞Ï±Ö',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.w800,
          ),
        ),
        centerTitle: true,
      ),
      //Î∞∞Í≤ΩÏù¥ÎØ∏ÏßÄ -> ÏΩòÌÖêÏ∏† -> Í≥†ÏñëÏù¥ Ï∫êÎ¶≠ÌÑ∞ ÏàúÏúºÎ°ú ÏåìÏûÑ
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ
          Container(
            decoration: const BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/nature_walk.jpg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
          // ÏΩòÌÖêÏ∏†
          SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            child: ConstrainedBox(
              constraints: BoxConstraints(
                minHeight: MediaQuery.of(context).size.height,
              ),
              child: SafeArea(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 25.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Ï≤òÏùå Ïò§Ïã† Í±∏ ÌôòÏòÅÌï¥Ïöî! \nÏ†ÄÎÖÅ Í≥µÍ∏∞Î•º ÎßàÏãúÎ©∞,\nÍ∞ÄÎ≥çÍ≤å Í±∏Ïñ¥Î≥ºÍπåÏöî?',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          letterSpacing: 0.8,
                          height: 1.3,
                          shadows: [
                            Shadow(
                              color: Colors.black.withValues(alpha: 0.8),
                              blurRadius: 8,
                              offset: const Offset(2, 2),
                            ),
                            Shadow(
                              color: Colors.black.withValues(alpha: 0.4),
                              blurRadius: 4,
                              offset: const Offset(1, 1),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 40),
                      Container(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 20),
                        decoration: BoxDecoration(
                          color: Colors.black.withValues(alpha: 0.3),
                          borderRadius: BorderRadius.circular(20),
                          border: Border.all(
                            color: Colors.white.withValues(alpha: 0.2),
                            width: 1,
                          ),
                        ),
                        child: IntrinsicWidth(
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Center(
                                child: GestureDetector(
                                  onTap: () =>
                                      handleLogin(context, signInWithKakao),
                                  child: Image.asset(
                                    'assets/images/kakao_login.png',
                                  ),
                                ),
                              ),
                              const SizedBox(height: 16),
                              Center(
                                child: GestureDetector(
                                  onTap: () =>
                                      handleLogin(context, signInWithGoogle),
                                  child: Image.asset(
                                    'assets/images/google_login.png',
                                    width: 200,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 120),
                    ],
                  ),
                ),
              ),
            ),
          ),
          // ÌïòÎã® Í≤ÄÏùÄ Í≥†ÏñëÏù¥ (Ïú†ÏßÄ)
          Positioned.fill(
            child: LayoutBuilder(
              builder: (context, constraints) {
                final double screenWidth = constraints.maxWidth;
                final double screenHeight = constraints.maxHeight;
                final double catWidth = screenWidth * 0.28 * 2;
                final double bottomPadding = screenHeight * 0.06;
                return Align(
                  alignment: Alignment.bottomCenter,
                  child: Padding(
                    padding: EdgeInsets.only(bottom: bottomPadding),
                    child: Transform.translate(
                      offset: Offset(-screenWidth * 0.23, 0),
                      child: BlackCatWidget(
                        width: catWidth,
                        bubbleMaxWidth: catWidth * 0.8,
                        screenType: 'selectMate',
                        defaultText: 'Ïñ¥ÏÑúÏò§ÎùºÎÉ•~üêæ ',
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
