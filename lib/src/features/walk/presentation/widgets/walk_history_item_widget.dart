import 'package:flutter/material.dart';
import 'package:walk/src/features/walk/domain/models/walk_session.dart';
import 'package:intl/intl.dart';

/// ÏÇ∞Ï±Ö Î™©Î°ùÏóêÏÑú ÏÇ¨Ïö©ÎêòÎäî Í∞úÎ≥Ñ ÏïÑÏù¥ÌÖú ÏúÑÏ†Ø
class WalkHistoryItemWidget extends StatelessWidget {
  final WalkSession walkSession;
  final VoidCallback onTap;
  final VoidCallback? onDelete; // ÏÇ≠Ï†ú ÏΩúÎ∞± Ï∂îÍ∞Ä

  const WalkHistoryItemWidget({
    super.key,
    required this.walkSession,
    required this.onTap,
    this.onDelete, // ÏÑ†ÌÉùÏ†Å ÌååÎùºÎØ∏ÌÑ∞
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.5), // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïä§ÌÉÄÏùº Ï∞∏Í≥†Ìïú Î∞òÌà¨Î™Ö Í≤ÄÏ†ï Î∞∞Í≤Ω
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
        border: Border.all(
          color: Colors.white54, // Îã§Ïù¥ÏñºÎ°úÍ∑∏ÏôÄ ÎèôÏùºÌïú Ìù∞ÏÉâ ÌÖåÎëêÎ¶¨
          width: 1,
        ),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(20),
          child: Padding(
            padding: const EdgeInsets.all(18),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ÏÉÅÎã®: ÎÇ†ÏßúÏôÄ Î©îÌÉÄ Ï†ïÎ≥¥
                Row(
                  children: [
                    // ÎÇ†Ïßú + ÏöîÏùº + ÏãúÍ∞Ñ - ÏùºÍ∏∞Ïû• Ïä§ÌÉÄÏùº (ÏôºÏ™Ω)
                    Expanded(
                      child: Builder(
                        builder: (context) {
                          final dateInfo =
                              _formatDateWithDay(walkSession.startTime);
                          return Row(
                            mainAxisSize: MainAxisSize.min,
                            crossAxisAlignment: CrossAxisAlignment.baseline,
                            textBaseline: TextBaseline.alphabetic,
                            children: [
                              Text(
                                dateInfo['dateWithDay']!,
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  letterSpacing: 0.5,
                                  shadows: [
                                    Shadow(
                                      blurRadius: 2.0,
                                      color: Colors.black54,
                                      offset: Offset(1.0, 1.0),
                                    ),
                                  ],
                                ),
                              ),
                              const SizedBox(width: 4),
                              Text(
                                dateInfo['time']!,
                                style: const TextStyle(
                                  color: Colors.white70,
                                  fontSize: 13, // ÏãúÍ∞Ñ Î∂ÄÎ∂ÑÎßå ÏûëÏùÄ Í∏ÄÏî®
                                  fontWeight: FontWeight.w500,
                                  letterSpacing: 0.5,
                                  shadows: [
                                    Shadow(
                                      blurRadius: 2.0,
                                      color: Colors.black54,
                                      offset: Offset(1.0, 1.0),
                                    ),
                                  ],
                                ),
                              ),
                              const SizedBox(width: 8),
                              // Î©îÏù¥Ìä∏ Ï†ïÎ≥¥Î•º ÏãúÍ∞Ñ ÏòÜÏúºÎ°ú Ïù¥Îèô
                              Container(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 8, vertical: 2),
                                decoration: BoxDecoration(
                                  color: Colors.black.withOpacity(0.3),
                                  borderRadius: BorderRadius.circular(10),
                                  border: Border.all(
                                    color: Colors.white54,
                                    width: 0.8,
                                  ),
                                ),
                                child: Text(
                                  '${_getMateEmoji(walkSession.selectedMate)} ${_getSimpleMateText(walkSession.selectedMate)}',
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 11,
                                    fontWeight: FontWeight.w500,
                                    letterSpacing: 0.2,
                                    shadows: [
                                      Shadow(
                                        blurRadius: 2.0,
                                        color: Colors.black54,
                                        offset: Offset(1.0, 1.0),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          );
                        },
                      ),
                    ),
                    // Ïò§Î•∏Ï™Ω ÎÅù: Í±∞Î¶¨, ÏãúÍ∞Ñ, ÏÇ≠Ï†ú Î≤ÑÌäº
                    Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        // Í±∞Î¶¨ Ï†ïÎ≥¥
                        if (walkSession.totalDistance != null) ...[
                          Text(
                            'üë£ ${walkSession.totalDistance?.toStringAsFixed(1)}km',
                            style: const TextStyle(
                              color: Colors.white70,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                              shadows: [
                                Shadow(
                                  blurRadius: 2.0,
                                  color: Colors.black54,
                                  offset: Offset(1.0, 1.0),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 12),
                        ],
                        // ÏãúÍ∞Ñ Ï†ïÎ≥¥
                        if (walkSession.durationInMinutes != null) ...[
                          Text(
                            '‚è∞ ${walkSession.durationInMinutes}Î∂Ñ',
                            style: const TextStyle(
                              color: Colors.white70,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                              shadows: [
                                Shadow(
                                  blurRadius: 2.0,
                                  color: Colors.black54,
                                  offset: Offset(1.0, 1.0),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 8),
                        ],
                        // ÏÇ≠Ï†ú Î≤ÑÌäº
                        if (onDelete != null)
                          GestureDetector(
                            onTap: () => _showDeleteConfirmDialog(context),
                            child: Container(
                              padding: const EdgeInsets.all(4),
                              decoration: BoxDecoration(
                                color: Colors.red.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(6),
                                border: Border.all(
                                  color: Colors.red.withOpacity(0.3),
                                  width: 1,
                                ),
                              ),
                              child: const Icon(
                                Icons.close,
                                color: Colors.red,
                                size: 14,
                              ),
                            ),
                          ),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: 8),

                // Í≤ΩÏú†ÏßÄ ÏßàÎ¨∏ ÌëúÏãú
                if (walkSession.waypointQuestion != null &&
                    walkSession.waypointQuestion!.isNotEmpty)
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: Colors.white54,
                        width: 1,
                      ),
                    ),
                    child: Row(
                      children: [
                        Text(
                          '‚ùì',
                          style: TextStyle(fontSize: 16),
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            walkSession.waypointQuestion!,
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                              height: 1.3,
                              shadows: [
                                Shadow(
                                  blurRadius: 2.0,
                                  color: Colors.black54,
                                  offset: Offset(1.0, 1.0),
                                ),
                              ],
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                  )
                else
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: Colors.white38,
                        width: 1,
                      ),
                    ),
                    child: Row(
                      children: [
                        Text(
                          '‚ùì',
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.grey.withOpacity(0.6),
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'Í≤ΩÏú†ÏßÄ ÏßàÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§',
                          style: TextStyle(
                            color: Colors.white70,
                            fontSize: 13,
                            fontStyle: FontStyle.italic,
                            shadows: const [
                              Shadow(
                                blurRadius: 2.0,
                                color: Colors.black54,
                                offset: Offset(1.0, 1.0),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ - ÎÇ†Ïßú + ÏöîÏùº + ÏãúÍ∞ÑÏúºÎ°ú ÌëúÏãú
  Map<String, String> _formatDateWithDay(DateTime dateTime) {
    // ÌïúÍµ≠Ïñ¥ ÏöîÏùº ÎßµÌïë
    final weekdays = ['', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº'];
    final koreanWeekday = weekdays[dateTime.weekday];

    final dateWithDay =
        '${DateFormat('MM.dd').format(dateTime)}($koreanWeekday)';
    final time = DateFormat('HH:mm').format(dateTime);
    return {
      'dateWithDay': dateWithDay,
      'time': time,
    };
  }

  /// ÎèôÎ∞òÏûêÎ≥Ñ Ïù¥Î™®ÏßÄ Î∞òÌôò
  String _getMateEmoji(String mate) {
    switch (mate) {
      case 'ÌòºÏûê':
        return 'üåô'; // ÌòºÏûêÎßåÏùò ÏãúÍ∞Ñ
      case 'Ïó∞Ïù∏':
        return 'üíï'; // ÏÇ¨Îûë
      case 'ÏπúÍµ¨':
        return 'üë´'; // ÏπúÍµ¨
      default:
        return 'üö∂'; // Í∏∞Î≥∏ Í±∑Í∏∞
    }
  }

  /// Ïã¨ÌîåÌïú Î©îÏù¥Ìä∏ ÌÖçÏä§Ìä∏ Î∞òÌôò (Ïù¥Î™®ÏßÄ Ï†úÏô∏)
  String _getSimpleMateText(String? selectedMate) {
    switch (selectedMate) {
      case 'ÌòºÏûê':
        return 'ÌòºÏûê';
      case 'Ïó∞Ïù∏':
        return 'Ïó∞Ïù∏';
      case 'ÏπúÍµ¨':
        return 'ÏπúÍµ¨';
      case 'Í∞ÄÏ°±':
        return 'Í∞ÄÏ°±';
      case 'Î∞òÎ†§ÎèôÎ¨º':
        return 'Î∞òÎ†§ÎèôÎ¨º';
      default:
        return 'ÌòºÏûê';
    }
  }

  /// ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
  void _showDeleteConfirmDialog(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          backgroundColor: Colors.black.withOpacity(0.9),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
            side: const BorderSide(color: Colors.white54, width: 1),
          ),
          title: const Row(
            children: [
              Icon(Icons.delete_outline, color: Colors.red, size: 24),
              SizedBox(width: 8),
              Text(
                'Í∏∞Î°ù ÏÇ≠Ï†ú',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Ïù¥ ÏÇ∞Ï±Ö Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                style: TextStyle(
                  color: Colors.white70,
                  fontSize: 16,
                ),
              ),
              const SizedBox(height: 12),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: Colors.red.withOpacity(0.3),
                    width: 1,
                  ),
                ),
                child: Row(
                  children: [
                    const Text('‚ö†Ô∏è', style: TextStyle(fontSize: 16)),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'ÏÇ≠Ï†úÎêú Í∏∞Î°ùÏùÄ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
                        style: TextStyle(
                          color: Colors.red.shade300,
                          fontSize: 13,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(dialogContext).pop();
              },
              child: const Text(
                'Ï∑®ÏÜå',
                style: TextStyle(color: Colors.white70),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(dialogContext).pop();
                onDelete?.call(); // ÏÇ≠Ï†ú ÏΩúÎ∞± Ìò∏Ï∂ú
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red.withOpacity(0.8),
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'ÏÇ≠Ï†ú',
                style: TextStyle(fontWeight: FontWeight.w600),
              ),
            ),
          ],
        );
      },
    );
  }
}
