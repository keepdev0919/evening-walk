import 'package:flutter/material.dart';
import 'package:walk/src/features/walk/application/services/walk_state_manager.dart';
import 'package:walk/src/features/walk/application/services/walk_session_service.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:provider/provider.dart';
import 'dart:io';

import '../../../../shared/providers/upload_provider.dart';
import '../../../../shared/services/toast_service.dart';

class WalkDiaryDialog {
  static Future<void> show({
    required BuildContext context,
    required WalkStateManager walkStateManager,
    required Function(bool) onWalkCompleted,
    bool isViewMode = false, // ÏùΩÍ∏∞ Ï†ÑÏö© Î™®Îìú ÌîåÎûòÍ∑∏
  }) async {
    final TextEditingController reflectionController = TextEditingController(
      text: walkStateManager.userReflection ?? '',
    );
    final TextEditingController answerEditController = TextEditingController(
      text: walkStateManager.userAnswer ?? '',
    );
    String? currentPhotoPath = walkStateManager.photoPath;
    bool isEditingAnswer = false; // Ìé∏Ïßë Î™®Îìú ÏÉÅÌÉú
    bool isEditingReflection = false; // Ìé∏Ïßë Î™®Îìú ÏÉÅÌÉú

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return AlertDialog(
              backgroundColor: Colors.black.withValues(alpha: 0.9),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(24),
                side: const BorderSide(color: Colors.white54, width: 1.5),
              ),
              title: Align(
                alignment: Alignment.topRight,
                child: IconButton(
                  icon: const Icon(Icons.close, color: Colors.white),
                  onPressed: () {
                    Navigator.of(dialogContext).pop();
                  },
                ),
              ),
              content: SizedBox(
                width: double.maxFinite,
                height: MediaQuery.of(context).size.height * 0.85,
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // üéâ ÏôÑÎ£å Ï∂ïÌïò Ìó§Îçî
                      Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(20),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              Colors.green.withValues(alpha: 0.8),
                              Colors.teal.withValues(alpha: 0.6),
                            ],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(16),
                          border: Border.all(
                              color: Colors.white.withValues(alpha: 0.3)),
                        ),
                        child: Column(
                          children: [
                            const Text(
                              'üéâ',
                              style: TextStyle(fontSize: 48),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'ÏÇ∞Ï±Ö ÏôÑÎ£å!',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 22,
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.5,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Text(
                              'Ïò§ÎäòÏùò Ï∂îÏñµÏùÑ ÏùºÍ∏∞Î°ú ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî',
                              style: TextStyle(
                                color: Colors.white.withValues(alpha: 0.9),
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Í≤ΩÏú†ÏßÄ Í≤ΩÌóò ÏÑπÏÖò (Ìé∏Ïßë Í∞ÄÎä•)
                      if (walkStateManager.waypointQuestion != null)
                        _buildExperienceSection(
                          title: 'üö© Í≤ΩÏú†ÏßÄÏóêÏÑú',
                          content: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Q. ${walkStateManager.waypointQuestion}',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 15,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Container(
                                decoration: BoxDecoration(
                                  color: Colors.white.withValues(alpha: 0.1),
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                    color: Colors.white.withValues(alpha: 0.2),
                                  ),
                                ),
                                child: TextField(
                                  controller: answerEditController,
                                  readOnly: !isEditingAnswer,
                                  maxLines: 4,
                                  style: TextStyle(
                                    color: isEditingAnswer
                                        ? Colors.white
                                        : Colors.white70,
                                    fontSize: 14,
                                    height: 1.4,
                                  ),
                                  decoration: InputDecoration(
                                    hintText: isEditingAnswer
                                        ? '(ÎãµÎ≥ÄÏùÑ ÏûÖÎ†•ÌïòÍ±∞ÎÇò ÏàòÏ†ïÌïòÏÑ∏Ïöî)'
                                        : null,
                                    hintStyle: const TextStyle(
                                      color: Colors.white54,
                                      fontSize: 13,
                                    ),
                                    border: InputBorder.none,
                                    contentPadding: const EdgeInsets.all(12),
                                  ),
                                ),
                              ),
                              const SizedBox(height: 8),
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  final bool isNarrow =
                                      constraints.maxWidth < 360;

                                  final Widget primaryButton =
                                      ElevatedButton.icon(
                                    icon: Icon(
                                      isEditingAnswer
                                          ? Icons.check
                                          : Icons.edit,
                                      color: Colors.white,
                                    ),
                                    label: Text(
                                      isEditingAnswer ? 'ÏôÑÎ£å' : 'Ìé∏Ïßë',
                                      style:
                                          const TextStyle(color: Colors.white),
                                    ),
                                    onPressed: () {
                                      if (isEditingAnswer) {
                                        // ÏôÑÎ£å Î™®Îìú: Ï†ÄÏû•ÌïòÍ≥† Ìé∏Ïßë Î™®Îìú Ï¢ÖÎ£å
                                        FocusScope.of(context).unfocus();
                                        final updated =
                                            answerEditController.text.trim();
                                        walkStateManager.saveAnswerAndPhoto(
                                          answer:
                                              updated.isEmpty ? null : updated,
                                        );
                                        setState(() {
                                          isEditingAnswer = false;
                                        });
                                      } else {
                                        // Ìé∏Ïßë Î™®Îìú: Ìé∏Ïßë Î™®Îìú ÏãúÏûë (ÏùΩÍ∏∞ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå)
                                        if (!isViewMode) {
                                          setState(() {
                                            isEditingAnswer = true;
                                          });
                                        }
                                      }
                                    },
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor:
                                          Colors.blue.withValues(alpha: 0.8),
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 12, horizontal: 12),
                                      minimumSize: const Size(0, 44),
                                      visualDensity: VisualDensity.compact,
                                    ),
                                  );

                                  final Widget clearButton = TextButton.icon(
                                    icon: const Icon(Icons.clear,
                                        color: Colors.white70),
                                    label: const Text('ÏßÄÏö∞Í∏∞',
                                        style:
                                            TextStyle(color: Colors.white70)),
                                    onPressed: () {
                                      _showDeleteConfirmDialog(
                                        context: context,
                                        title: 'Í≤ΩÏú†ÏßÄ ÎãµÎ≥Ä ÏÇ≠Ï†ú',
                                        content: 'Í≤ΩÏú†ÏßÄ ÎãµÎ≥ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                                        onConfirm: () {
                                          answerEditController.clear();
                                          walkStateManager.saveAnswerAndPhoto(
                                              answer: null);
                                          setState(() {
                                            isEditingAnswer = true;
                                          });
                                        },
                                      );
                                    },
                                    style: TextButton.styleFrom(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 12, horizontal: 12),
                                      minimumSize: const Size(0, 44),
                                      visualDensity: VisualDensity.compact,
                                    ),
                                  );

                                  if (isNarrow) {
                                    return Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.stretch,
                                      children: [
                                        SizedBox(
                                            width: double.infinity,
                                            child: primaryButton),
                                        if (isEditingAnswer) ...[
                                          const SizedBox(height: 8),
                                          clearButton,
                                        ],
                                      ],
                                    );
                                  }

                                  return Row(
                                    children: [
                                      Expanded(child: primaryButton),
                                      if (isEditingAnswer) ...[
                                        const SizedBox(width: 8),
                                        clearButton,
                                      ],
                                    ],
                                  );
                                },
                              )
                            ],
                          ),
                        ),

                      if (walkStateManager.waypointQuestion != null)
                        const SizedBox(height: 16),

                      // Î™©Ï†ÅÏßÄ Í≤ΩÌóò ÏÑπÏÖò (Ìé∏Ïßë Í∞ÄÎä•)
                      _buildExperienceSection(
                        title: 'üì∏ Î™©Ï†ÅÏßÄÏóêÏÑú',
                        content: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Ï∂îÏ≤ú Ìè¨Ï¶àÎ°ú Ï∞çÏùÄ ÏÇ¨ÏßÑ',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 15,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            if (currentPhotoPath != null)
                              GestureDetector(
                                onTap: () => _showFullScreenPhoto(
                                  context,
                                  currentPhotoPath!,
                                ),
                                child: Container(
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(12),
                                    border: Border.all(
                                      color:
                                          Colors.white.withValues(alpha: 0.3),
                                      width: 2,
                                    ),
                                  ),
                                  child: ClipRRect(
                                    borderRadius: BorderRadius.circular(12),
                                    child: _buildImageWidget(currentPhotoPath!),
                                  ),
                                ),
                              )
                            else
                              Container(
                                width: double.infinity,
                                height: 200,
                                alignment: Alignment.center,
                                decoration: BoxDecoration(
                                  color: Colors.white.withValues(alpha: 0.05),
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                    color: Colors.white.withValues(alpha: 0.2),
                                  ),
                                ),
                                child: const Text(
                                  'ÏÇ¨ÏßÑÏù¥ ÏóÜÏäµÎãàÎã§. Ï∂îÍ∞ÄÌï¥ Î≥¥ÏÑ∏Ïöî!',
                                  style: TextStyle(color: Colors.white70),
                                ),
                              ),
                            const SizedBox(height: 8),
                            LayoutBuilder(
                              builder: (context, constraints) {
                                final bool isNarrow =
                                    constraints.maxWidth < 360;

                                final Widget takeOrRetakeButton =
                                    ElevatedButton.icon(
                                  icon: const Icon(Icons.camera_alt,
                                      color: Colors.white),
                                  label: Text(
                                    currentPhotoPath == null
                                        ? 'ÏÇ¨ÏßÑ Ï∂îÍ∞Ä'
                                        : 'ÏÇ¨ÏßÑ Îã§Ïãú Ï∞çÍ∏∞',
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                  onPressed: () async {
                                    final path =
                                        await walkStateManager.takePhoto();
                                    if (path != null) {
                                      walkStateManager.saveAnswerAndPhoto(
                                          photoPath: path);
                                      if (context.mounted) {
                                        setState(() {
                                          currentPhotoPath = path;
                                        });
                                      }
                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(
                                        const SnackBar(
                                            content: Text('ÏÇ¨ÏßÑÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.')),
                                      );
                                    }
                                  },
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor:
                                        Colors.blue.withValues(alpha: 0.8),
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 12, horizontal: 12),
                                    minimumSize: const Size(0, 44),
                                    visualDensity: VisualDensity.compact,
                                  ),
                                );

                                final Widget? deleteButton = currentPhotoPath !=
                                        null
                                    ? TextButton.icon(
                                        icon: const Icon(Icons.delete,
                                            color: Colors.white70),
                                        label: const Text('ÏÇ¨ÏßÑ Ï†úÍ±∞',
                                            style: TextStyle(
                                                color: Colors.white70)),
                                        onPressed: () {
                                          _showDeleteConfirmDialog(
                                            context: context,
                                            title: 'ÏÇ¨ÏßÑ Ï†úÍ±∞',
                                            content: 'Î™©Ï†ÅÏßÄ ÏÇ¨ÏßÑÏùÑ Ï†úÍ±∞ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                                            onConfirm: () {
                                              walkStateManager
                                                  .saveAnswerAndPhoto(
                                                      photoPath: null);
                                              setState(() {
                                                currentPhotoPath = null;
                                              });
                                            },
                                          );
                                        },
                                        style: TextButton.styleFrom(
                                          padding: const EdgeInsets.symmetric(
                                              vertical: 12, horizontal: 12),
                                          minimumSize: const Size(0, 44),
                                          visualDensity: VisualDensity.compact,
                                        ),
                                      )
                                    : null;

                                if (isNarrow) {
                                  return Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.stretch,
                                    children: [
                                      SizedBox(
                                          width: double.infinity,
                                          child: takeOrRetakeButton),
                                      if (deleteButton != null) ...[
                                        const SizedBox(height: 8),
                                        deleteButton,
                                      ]
                                    ],
                                  );
                                }

                                return Row(
                                  children: [
                                    Expanded(child: takeOrRetakeButton),
                                    if (deleteButton != null) ...[
                                      const SizedBox(width: 8),
                                      deleteButton,
                                    ]
                                  ],
                                );
                              },
                            )
                          ],
                        ),
                      ),

                      if (walkStateManager.photoPath != null)
                        const SizedBox(height: 16),

                      // ÏÜåÍ∞ê ÏûÖÎ†• ÏÑπÏÖò
                      _buildExperienceSection(
                        title: 'üí≠ Ïò§ÎäòÏùò ÏÜåÍ∞ê',
                        content: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Ïò§Îäò ÏÇ∞Ï±ÖÏùÄ Ïñ¥Îñ†ÏÖ®ÎÇòÏöî?',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 15,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.white.withValues(alpha: 0.1),
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(
                                    color: Colors.white.withValues(alpha: 0.2)),
                              ),
                              child: TextField(
                                controller: reflectionController,
                                readOnly: !isEditingReflection,
                                maxLines: 4,
                                style: TextStyle(
                                  color: isEditingReflection
                                      ? Colors.white
                                      : Colors.white70,
                                  fontSize: 14,
                                  height: 1.4,
                                ),
                                decoration: InputDecoration(
                                  hintText: isEditingReflection
                                      ? 'Ïòà) ÎÇ†Ïî®Í∞Ä Ï¢ãÏïÑÏÑú Í∏∞Î∂ÑÏù¥ Ï¢ãÏïòÏñ¥Ïöî. Îã§ÏùåÏóêÎèÑ Ïù¥Îü∞ ÏÇ∞Ï±ÖÏùÑ ÌïòÍ≥† Ïã∂Ïñ¥Ïöî.'
                                      : null,
                                  hintStyle: TextStyle(
                                    color: Colors.white.withValues(alpha: 0.5),
                                    fontSize: 13,
                                  ),
                                  border: InputBorder.none,
                                  contentPadding: const EdgeInsets.all(12),
                                ),
                                onChanged: (value) {
                                  // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏Îäî Ïª®Ìä∏Î°§Îü¨ÏóêÏÑú Ï≤òÎ¶¨Îê®
                                },
                              ),
                            ),
                            const SizedBox(height: 8),
                            LayoutBuilder(
                              builder: (context, constraints) {
                                final bool isNarrow =
                                    constraints.maxWidth < 360;

                                final Widget applyButton = ElevatedButton.icon(
                                  icon: Icon(
                                    isEditingReflection
                                        ? Icons.check
                                        : Icons.edit,
                                    color: Colors.white,
                                  ),
                                  label: Text(
                                    isEditingReflection ? 'ÏôÑÎ£å' : 'Ìé∏Ïßë',
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                  onPressed: () {
                                    if (isEditingReflection) {
                                      // ÏôÑÎ£å Î™®Îìú: Ï†ÄÏû•ÌïòÍ≥† Ìé∏Ïßë Î™®Îìú Ï¢ÖÎ£å
                                      FocusScope.of(context).unfocus();
                                      final updated =
                                          reflectionController.text.trim();
                                      walkStateManager.saveReflection(
                                          updated.isEmpty ? null : updated);
                                      setState(() {
                                        isEditingReflection = false;
                                      });
                                    } else {
                                      // Ìé∏Ïßë Î™®Îìú: Ìé∏Ïßë Î™®Îìú ÏãúÏûë (ÏùΩÍ∏∞ Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå)
                                      if (!isViewMode) {
                                        setState(() {
                                          isEditingReflection = true;
                                        });
                                      }
                                    }
                                  },
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor:
                                        Colors.blue.withValues(alpha: 0.8),
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 12, horizontal: 12),
                                    minimumSize: const Size(0, 44),
                                    visualDensity: VisualDensity.compact,
                                  ),
                                );

                                final Widget clearButton = TextButton.icon(
                                  icon: const Icon(Icons.clear,
                                      color: Colors.white70),
                                  label: const Text('ÏßÄÏö∞Í∏∞',
                                      style: TextStyle(color: Colors.white70)),
                                  onPressed: () {
                                    _showDeleteConfirmDialog(
                                      context: context,
                                      title: 'ÏÜåÍ∞ê ÏÇ≠Ï†ú',
                                      content: 'Ïò§ÎäòÏùò ÏÜåÍ∞êÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                                      onConfirm: () {
                                        reflectionController.clear();
                                        walkStateManager.saveReflection(null);
                                        setState(() {
                                          isEditingReflection = true;
                                        });
                                      },
                                    );
                                  },
                                  style: TextButton.styleFrom(
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 12, horizontal: 12),
                                    minimumSize: const Size(0, 44),
                                    visualDensity: VisualDensity.compact,
                                  ),
                                );

                                if (isNarrow) {
                                  return Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.stretch,
                                    children: [
                                      SizedBox(
                                          width: double.infinity,
                                          child: applyButton),
                                      if (isEditingReflection) ...[
                                        const SizedBox(height: 8),
                                        clearButton,
                                      ],
                                    ],
                                  );
                                }

                                return Row(
                                  children: [
                                    Expanded(child: applyButton),
                                    if (isEditingReflection) ...[
                                      const SizedBox(width: 8),
                                      clearButton,
                                    ],
                                  ],
                                );
                              },
                            )
                          ],
                        ),
                      ),

                      const SizedBox(height: 24),

                      // Î≤ÑÌäº ÏòÅÏó≠
                      if (isViewMode)
                        // ÏùΩÍ∏∞ Î™®Îìú: Îã´Í∏∞ Î≤ÑÌäºÎßå ÌëúÏãú
                        SizedBox(
                          width: double.infinity,
                          child: ElevatedButton.icon(
                            icon: const Icon(Icons.close, color: Colors.white),
                            label: const Text(
                              'Îã´Í∏∞',
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            onPressed: () {
                              Navigator.of(dialogContext).pop();
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor:
                                  Colors.grey.withValues(alpha: 0.8),
                              elevation: 0,
                              padding: const EdgeInsets.symmetric(vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                                side: BorderSide(
                                    color: Colors.grey.withValues(alpha: 0.3)),
                              ),
                            ),
                          ),
                        )
                      else
                        // Ìé∏Ïßë Î™®Îìú: Ï†ÄÏû• Î∞è Í≥µÏú† Î≤ÑÌäº
                        Row(
                          children: [
                            // Ï†ÄÏû•ÌïòÍ∏∞ Î≤ÑÌäº
                            Expanded(
                              child: ElevatedButton.icon(
                                icon:
                                    const Icon(Icons.save, color: Colors.white),
                                label: const Text(
                                  'ÏùºÍ∏∞ Ï†ÄÏû•',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                onPressed: () async {
                                  final uploadProvider =
                                      Provider.of<UploadProvider>(context,
                                          listen: false);

                                  try {
                                    // 1. Ï¶âÏãú ÌÖçÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Îßå Ï†ÄÏû• (ÏÇ¨ÏßÑ Ï†úÏô∏)
                                    final walkSessionService =
                                        WalkSessionService();
                                    final sessionId = await walkSessionService
                                        .saveWalkSessionWithoutPhoto(
                                      walkStateManager: walkStateManager,
                                      walkReflection: reflectionController.text
                                              .trim()
                                              .isEmpty
                                          ? null
                                          : reflectionController.text.trim(),
                                      weatherInfo: 'ÎßëÏùå',
                                      locationName: 'ÏÑúÏö∏',
                                    );

                                    if (sessionId != null) {
                                      // 2. Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í≥† ÌôàÏúºÎ°ú Ï¶âÏãú Ïù¥Îèô
                                      Navigator.of(dialogContext).pop();
                                      onWalkCompleted(true);

                                      // ÌôàÏúºÎ°ú Ïù¥Îèô
                                      Navigator.of(context)
                                          .pushNamedAndRemoveUntil(
                                        '/',
                                        (route) => false,
                                      );

                                      // 3. ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ÌëúÏãú
                                      ToastService.showSuccess('ÏùºÍ∏∞Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');

                                      // 4. Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú ÏãúÏûë (ÏÇ¨ÏßÑÏù¥ ÏûàÎäî Í≤ΩÏö∞, await Ï†úÍ±∞)
                                      if (walkStateManager.photoPath != null) {
                                        // awaitÎ•º Ï†úÍ±∞ÌïòÏó¨ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§ÌñâÎêòÎèÑÎ°ù Ìï®
                                        uploadProvider.startBackgroundUpload(
                                          sessionId,
                                          walkStateManager.photoPath!,
                                        );
                                      }
                                    } else {
                                      ToastService.showError(
                                          'Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                                    }
                                  } catch (e) {
                                    ToastService.showError(
                                        'Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${e.toString()}');
                                  }
                                },
                                style: ElevatedButton.styleFrom(
                                  backgroundColor:
                                      Colors.blue.withValues(alpha: 0.8),
                                  elevation: 0,
                                  padding:
                                      const EdgeInsets.symmetric(vertical: 16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(16),
                                    side: BorderSide(
                                        color:
                                            Colors.blue.withValues(alpha: 0.3)),
                                  ),
                                ),
                              ),
                            ),

                            const SizedBox(width: 12),

                            // Í≥µÏú†ÌïòÍ∏∞ Î≤ÑÌäº (ÎÇòÏ§ëÏóê Íµ¨ÌòÑ)
                            Expanded(
                              child: ElevatedButton.icon(
                                icon: const Icon(Icons.share,
                                    color: Colors.white),
                                label: const Text(
                                  'Í≥µÏú†ÌïòÍ∏∞',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                onPressed: () {
                                  // TODO: ÏÇ∞Ï±Ö ÏùºÍ∏∞ Í≥µÏú† Í∏∞Îä• Íµ¨ÌòÑ ÏòàÏ†ï
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                      content: Text('Í≥µÏú† Í∏∞Îä•ÏùÄ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏûÖÎãàÎã§!'),
                                      backgroundColor: Colors.green,
                                    ),
                                  );
                                },
                                style: ElevatedButton.styleFrom(
                                  backgroundColor:
                                      Colors.green.withValues(alpha: 0.8),
                                  elevation: 0,
                                  padding:
                                      const EdgeInsets.symmetric(vertical: 16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(16),
                                    side: BorderSide(
                                        color: Colors.green
                                            .withValues(alpha: 0.3)),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                    ],
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  // Í≤ΩÌóò ÏÑπÏÖò ÎπåÎçî
  static Widget _buildExperienceSection({
    required String title,
    required Widget content,
  }) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.white.withValues(alpha: 0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.w700,
              letterSpacing: 0.3,
            ),
          ),
          const SizedBox(height: 12),
          content,
        ],
      ),
    );
  }

  // ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
  static Future<void> _showDeleteConfirmDialog({
    required BuildContext context,
    required String title,
    required String content,
    required VoidCallback onConfirm,
  }) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.black.withValues(alpha: 0.9),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
            side: const BorderSide(color: Colors.white54, width: 1),
          ),
          title: Text(
            title,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 18,
              fontWeight: FontWeight.w600,
            ),
          ),
          content: Text(
            content,
            style: const TextStyle(
              color: Colors.white70,
              fontSize: 16,
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text(
                'Ï∑®ÏÜå',
                style: TextStyle(color: Colors.white70),
              ),
              onPressed: () {
                Navigator.of(context).pop();
                // ÌÇ§Î≥¥Îìú Ïà®Í∏∞Í∏∞
                FocusScope.of(context).unfocus();
              },
            ),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red.withValues(alpha: 0.8),
                foregroundColor: Colors.white,
              ),
              child: const Text('ÏÇ≠Ï†ú'),
              onPressed: () {
                Navigator.of(context).pop();
                onConfirm();
              },
            ),
          ],
        );
      },
    );
  }

  // Ï†ÑÏ≤¥ÌôîÎ©¥ ÏÇ¨ÏßÑ Î≥¥Í∏∞
  static void _showFullScreenPhoto(BuildContext context, String photoPath) {
    showDialog(
      context: context,
      builder: (ctx) => Dialog(
        backgroundColor: Colors.black,
        insetPadding: EdgeInsets.zero,
        child: Stack(
          children: [
            Positioned.fill(
              child: _buildImageWidget(photoPath, fit: BoxFit.contain),
            ),
            Positioned(
              top: 40,
              right: 20,
              child: IconButton(
                icon: const Icon(Icons.close, color: Colors.white, size: 30),
                onPressed: () => Navigator.pop(ctx),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// URLÏù∏ÏßÄ Î°úÏª¨ ÌååÏùº Í≤ΩÎ°úÏù∏ÏßÄ Íµ¨Î∂ÑÌïòÏó¨ Ï†ÅÏ†àÌïú Ïù¥ÎØ∏ÏßÄ ÏúÑÏ†Ø Î∞òÌôò
  static Widget _buildImageWidget(String imagePath, {BoxFit? fit}) {
    final isUrl =
        imagePath.startsWith('http://') || imagePath.startsWith('https://');

    if (isUrl) {
      // Firebase Storage URLÏù∏ Í≤ΩÏö∞ - CachedNetworkImage ÏÇ¨Ïö©
      return CachedNetworkImage(
        imageUrl: imagePath,
        width: double.infinity,
        height: fit == null ? 200 : null,
        fit: fit ?? BoxFit.cover,
        placeholder: (context, url) => Container(
          width: double.infinity,
          height: fit == null ? 200 : null,
          color: Colors.grey.withValues(alpha: 0.1),
          child: const Center(
            child: CircularProgressIndicator(
              color: Colors.white,
              strokeWidth: 2,
            ),
          ),
        ),
        errorWidget: (context, url, error) {
          print('Ï∫êÏãúÎêú ÎÑ§Ìä∏ÏõåÌÅ¨ Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®: $error');
          return Container(
            width: double.infinity,
            height: fit == null ? 200 : null,
            color: Colors.red.withValues(alpha: 0.1),
            child: const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error_outline, color: Colors.red, size: 32),
                  SizedBox(height: 8),
                  Text(
                    'ÏÇ¨ÏßÑÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§',
                    style: TextStyle(color: Colors.red, fontSize: 12),
                  ),
                ],
              ),
            ),
          );
        },
      );
    } else {
      // Î°úÏª¨ ÌååÏùº Í≤ΩÎ°úÏù∏ Í≤ΩÏö∞
      return Image.file(
        File(imagePath),
        width: double.infinity,
        height: fit == null ? 200 : null,
        fit: fit ?? BoxFit.cover,
        errorBuilder: (context, error, stackTrace) {
          print('Î°úÏª¨ Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®: $error');
          return Container(
            width: double.infinity,
            height: fit == null ? 200 : null,
            color: Colors.red.withValues(alpha: 0.1),
            child: const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error_outline, color: Colors.red, size: 32),
                  SizedBox(height: 8),
                  Text(
                    'Î°úÏª¨ ÏÇ¨ÏßÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§',
                    style: TextStyle(color: Colors.red, fontSize: 12),
                  ),
                ],
              ),
            ),
          );
        },
      );
    }
  }
}
